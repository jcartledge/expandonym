<?php
// $Id$

function expandonym_filter_tips($delta, $format, $long = FALSE) {
  return t('Wrap acronyms with definitions in <acronym> tags');
}

function expandonym_filter($op, $delta = 0, $format = -1, $text = '', $cache_id = 0) {
  if(_expandonym_by_type()) switch ($op) {
    case 'list':
      return array(t('Expandonym filter'));
    case 'description':
      return t('Wrap acronyms with definitions in <acronym> tags');
    case 'prepare':
      return $text;
    case 'process':
      return _expandonym_process($text);
    case 'settings':
      return _expandonym_settings();
  }
}

function _expandonym_settings() {
  $form['Expandonym'] = array(
    '#type' => 'fieldset',
    '#title' => t('Expandonym filter'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
  );
  $form['Expandonym']["expandonym_acronyms"] = array(
    '#type' => 'textarea',
    '#title' => t('Acronyms and expansions'),
    '#default_value' => variable_get('expandonym_acronyms', ''),
    '#description' => t('One per line - [acronym] [definition]'),
    '#required' => TRUE,
  );
  $form['Expandonym']['expandonym_exclude_content_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Content types to exclude'),
    '#options' => node_get_types('names'),
    '#default_value' => variable_get('expandonym_exclude_content_types', array()),
    '#description' => t("Specify which content types to exclude when performing acronym expansion"),
  );
  return $form;
}

function _expandonym_process($html = '') {
  if (!$html) return $html;
  $acronyms = _expandonym_load_acronyms();
  $matched = array();
  $dom = new DOMDocument('1.0', 'UTF-8');
  $dom->preserveWhiteSpace = FALSE;
  $dom->formatOutput = FALSE;
  $dom->recover = TRUE;
  try {
    @$dom->loadHTML("<html><head><meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/></head><body>{$html}</body></html>");
  } catch (Exception $e) {
    return $html;
  }
  $xpath = new DOMXPath($dom);
  $text_nodes = $xpath->evaluate('//text()[name(..)!="abbr"][name(..)!="acronym"][name(..)!="h2"]');
  $re = '/\b([A-Z]+)\b/';
  foreach($text_nodes as $text_node) {
    $parent = $text_node->parentNode;
    if($parent) {
      $next = $text_node->nextSibling;
      $parent->removeChild($text_node);
      $text = $text_node->nodeValue;
      $texts = preg_split($re, $text, null, PREG_SPLIT_DELIM_CAPTURE);
      foreach($texts as $text) {
        if(isset($acronyms[$text])) {
          $abbr = $dom->createElement('abbr');
          $abbr->setAttribute('title', $acronyms[$text]);
          $class_name = 'initialism';
          if(!isset($matched[$text])) {
            $matched[$text] = $text;
            $class_name .= ' tooltip';
          }
          $abbr->setAttribute('class', $class_name);
          $abbr->appendChild($dom->createTextNode($text));
          $next ? $parent->insertBefore($abbr, $next) : $parent->appendChild($abbr);
        } else {
          $text = $dom->createTextNode($text);
          $next ? $parent->insertBefore($text, $next) : $parent->appendChild($text);
        }
      }
    }
  }
  $full_doc = $dom->saveHTML();
  preg_match(',<body>(.*)</body>,msu', $full_doc, $matches);
  return $matches[1];
}

function _expandonym_load_acronyms() {
  $acronyms = array();
  $acronyms_unindexed = explode("\n", variable_get('expandonym_acronyms', ''));
  foreach($acronyms_unindexed as $acronym) {
    list($key, $acronym) = explode(' ', $acronym, 2);
    $acronyms[$key] = $acronym;
  }
  return $acronyms;
}

function _expandonym_by_type() {
  $excluded_types = array_filter(variable_get('expandonym_exclude_content_types', array()));
  if(!preg_match('@node/([\d]+).*@', $_GET['q'], $matches)) return true;
  $nid = array_pop($matches);
  $type = db_result(db_query('SELECT `type` FROM {node} WHERE `nid`=%d', $nid));
  return !in_array($type, $excluded_types);
}